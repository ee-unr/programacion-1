---
number-sections: false
---

```{=latex}
\thispagestyle{primerapagina}
```

# Práctica de la Unidad 5

## Vectores

### Ejercicio 1

**Suma de los elementos de un vector**

Definir una función llamada `suma(v)` que reciba un vector numérico `v` de cualquier longitud y devuelva la suma de sus elementos. Ejemplos de su uso:

```{r}
#| echo: false
suma <- function(v) {
  resultado <- 0
  for (i in 1:length(v)) {
    resultado <- resultado + v[i]
  }
  return(resultado)
}
```


```{r}
mi_vector <- c(60, -5, 0, 12, 1)
suma(mi_vector)
x <- 3
suma(x)
```

### Ejercicio 2

**Suma de vectores**

La suma de dos vectores de la misma dimensión está dada por un nuevo vector donde cada elemento es igual a la suma de los elementos que ocupan la misma posición en los vectores originales. Por ejemplo:

$$
\bar{u} + \bar{v} = \begin{pmatrix} 5 \\ 8 \\ 2 \end{pmatrix} +  \begin{pmatrix} 2 \\ 3 \\ -1 \end{pmatrix}  = \begin{pmatrix} 7 \\ 11 \\ 1 \end{pmatrix}
$$

Definir una función llamada `sumar_vectores(u, v)` que reciba dos vectores `u` y `v` de la misma dimensión y devuelva su suma. La función debe devolver un error informativo si los largos de ambos vectores no son iguales. Ejemplos de su uso:

```{r}
#| echo: false
#| error: true
sumar_vectores <- function(u, v) {
  nu <- length(u)
  nv <- length(v)
  if (nu != nv) {
    stop("Las dimensiones de los vectores no coinciden.")
  }
  suma <- numeric(nu)
  for (i in 1:nu) { 
    suma[i] <- u[i] + v[i]
  }
  return(suma)
}
```

```{r}
#| error: true
u <- c(5, 8, 2)
v <- c(2, 3, -1)
sumar_vectores(u, v)

x <- 10
y <- 2
sumar_vectores(x, y)

w <- c(5, 8, 2)
z <- c(2, 3)
sumar_vectores(w, z)
```


### Ejercicio 3

**Ordenar los elementos de un vector numérico**

Definir una función llamada `ordenar_asc(v)` que tome como entrada un vector numérico `v` de cualquier largo y lo devuelva con sus elementos ordenados en forma ascendente (de menor a mayor). La función debe cubrir el caso en el que el largo de `v` sea 1 (en cuyo caso devuelve el valor provisto, sin arrojar errores). Ejemplos de su uso:

```{r}
#| echo: false
ordenar_asc <- function(v) {
  n <- length(v)
  for (i in 1:n) {
    for (j in i:n) {
      if (v[i] > v[j]) {
        tmp <- v[i]
        v[i] <- v[j]
        v[j] <- tmp 
      }
    }
  }
  return(v)
}
```

```{r}
mi_vector <- c(60, -5, 0, 12, 1)
ordenar_asc(mi_vector)
x <- 1
ordenar_asc(x)
```

### Ejercicio 4

**Hallar el máximo de un vector**

Definir una función llamada `maximo(v)` que encuentre cuál es el mayor valor en un vector numérico `v`. La función debe devolver un vector con dos elementos, el primero es el valor del máximo y el segundo es la posición en la cual el mismo se halla en el vector `v`. Si dicho mayor valor estuviese repetido en el vector, se determina la posición de su primera ocurrencia. El vector devuelto debe hacer uso del atributo *names*. Ejemplos de su uso:

```{r}
#| echo: false
maximo <- function(v) {
  n <- length(v)
  mayor <- v[1]
  posicion <- 1
  for (i in 1:n) {
    # Desde i = 1 para que también funcione si n = 1
    if (v[i] > mayor) {
      mayor <- v[i]
      posicion <- i
    }
  }
  resultado <- c("mayor" = mayor, "posicion" = posicion)
  return(resultado)
}
```

```{r}
mi_vector <- c(60, -5, 0, 120, 1)
maximo(mi_vector)
x <- 6
maximo(x)
```

### Ejercicio 5

**Álgebra vectorial**

a.  Dados dos vectores $\bar u = (u_1, u_2, ..., u_n)$ y $\bar v = (v_1, v_2, ..., v_n)$, ambos $\in \mathbf{R}^n$, se define como producto escalar al escalar: $\bar u \times \bar v = u_1v_1+u_2v_2+....+u_nv_n$.

    Definir una función llamada `prod_escalar(u, v)` que tome dos vectores `u` y `v` de la misma dimensión y devuelva el producto escalar entre ellos. La función debe devolver un error informativo si largo de los vectores no admite esta operación. Ejemplos de su uso:
    
    ```{r}
    #| echo: false
    prod_escalar <- function(u, v) {
      nu <- length(u)
      nv <- length(v)
      if (nu != nv) {
        stop("Las dimensiones de los vectores no coinciden.")
      }
      suma <- 0
      for (i in 1:nu) {
        suma <- suma + u[i] * v[i]
      }
      return(suma)
    }
    ```
    
    ```{r}
    #| error: true
    u <- c(5, 8, 2)
    v <- c(2, 3, -1)
    prod_escalar(u, v)
    
    x <- 10
    y <- 2
    prod_escalar(x, y)
    
    w <- c(5, 8, 2)
    z <- c(2, 3)
    prod_escalar(w, z)
    ```

b.  Dados dos vectores $\bar u = (u_1, u_2, u_3)$ y $\bar v = (v_1, v_2, v_3)$, ambos $\in \mathbf{R}^3$, se define como producto vectorial de $\bar u$ con $\bar v$ al vector de $\mathbf{R}^3$: $\bar u \wedge \bar v = (u_2v_3-u_3v_2, u_3v_1-u_1v_3, u_1v_2-u_2v_1)$.
    
    Definir una función llamada `prod_vectorial(u, v)` que tome dos vectores `u` y `v` de largo 3 y devuelva el producto vectorial entre ellos. La función debe devolver un error informativo si los vectores no son de dimensión 3. Ejemplos de su uso:
    
    ```{r}
    #| echo: false
    prod_vectorial <- function(u, v) {
      nu <- length(u)
      nv <- length(v)
      if (nu != 3 || nv != 3) {
        stop("Los vectores no son de dimensión 3.")
      }
      resultado <- c(u[2] * v[3] - u[3] * v[2], 
                     u[3] * v[1] - u[1] * v[3], 
                     u[1] * v[2] - u[2] * v[1])
      return(resultado)
    }
    ```
    
    ```{r}
    #| error: true
    u <- c(5, 8, 2)
    v <- c(2, 3, -1)
    prod_vectorial(u, v)
    
    w <- c(5, 8)
    z <- c(2, 3)
    prod_vectorial(w, z)
    ```

c.  Dados tres vectores $\bar u$, $\bar v$ y $\bar w \in \mathbf{R}^3$, se llama producto mixto de $\bar u$, $\bar v$ y $\bar w$, en ese orden, al escalar: $\bar u \wedge \bar v \times \bar w$.
    
    Haciendo uso de las funciones definidas en los ítems anteriores, definir una función llamada `prod_mixto(u, v, w)` que tome tres vectores de largo 3 y devuelva el producto mixto entre ellos. Ejemplo de su uso:
    
    ```{r}
    #| echo: false
    prod_mixto <- function(u, v, w) {
      resultado1 <- prod_vectorial(u, v)
      resultado2 <- prod_escalar(resultado1, w)
      return(resultado2)
    }
    ```
    
    ```{r}
    #| error: true
    u <- c(5, 8, 2)
    v <- c(2, 3, -1)
    w <- c(1, 2, 3)
    x <- c(1, 2)
    prod_mixto(u, v, w)
    prod_mixto(u, v, x)
    ```

d.  Haciendo uso de las funciones definidas en los ítems anteriores, definir una función llamada `mostrar_productos(u, v, w)` que tome tres vectores $\bar u$, $\bar v$ y $\bar w \in \mathbf{R}^3$ y calcule y muestre en la consola:
    
    - el producto escalar $\bar v \wedge \bar w$
    - el producto mixto $\bar v \wedge \bar w \times \bar u$
    
    Además, la función debe devolver un vector numérico de largo 2 con los resultados anteriores, en ese orden, con nombres. Ejemplo de su uso:
     
    ```{r}
    #| echo: false
    mostrar_productos <- function(u, v, w) {
      prod_esc <- prod_escalar(v, w)
      prod_mix <- prod_mixto(v, w, u)
      cat("El producto escalar entre v y w es:", prod_esc, "\n")
      cat("El producto mixto entre v, w y u es:", prod_mix, "\n")
      resultado <- c("prod_escalar" = prod_esc, "prod_mixto" = prod_mix)
      return(resultado)
    }
    ```
    
    ```{r}
    #| error: true
    u <- c(5, 8, 2)
    v <- c(2, 3, -1)
    w <- c(1, 2, 3)
    x <- c(1, 2)
    
    productos <- mostrar_productos(u, v, w)
    productos
    productos[1]
    productos["prod_mixto"]
    productos <- mostrar_productos(u, v, x)
    ```

### Ejercicio 6

**La criba de Eratóstenes**

En el siglo III a.C., el astrónomo griego Eratóstenes desarrolló un algoritmo para encontrar todos los números primos menores que un número natural dado `n`. El mismo consiste en anotar una tabla todos los naturales entre 2 y `n`. Por ejemplo, para `n = 20`, empezamos por escribir el siguiente conjunto:

```{r, out.width='80%', fig.show='hold', echo=FALSE, fig.align="center"}
knitr::include_graphics('../imagenes/practica_unidad_5/erathostenes1.jpg')
```

Luego se encierra con un círculo el primer número del conjunto, indicando que hemos encontrado un número primo. Se recorre el resto del grupo tachando cada múltiplo del valor que hemos encerrado recién, dado que esto significa que no puede ser primo. Por lo tanto, al finalizar el primer paso del algoritmo, habremos encerrado el número 2 y tachado todos los múltiplos de 2, como se ve a continuación:

```{r, out.width='80%', fig.show='hold', echo=FALSE, fig.align="center"}
knitr::include_graphics('../imagenes/practica_unidad_5/erathostenes2.jpg')
```

A partir de acá, simplemente se repite el proceso encerrando el primer número del conjunto que no está ni tachado ni encerrado y luego tachando todos sus múltiplos. Eventualmente, cada número en la lista quedará encerrado o tachado, como se muestra en el diagrama:

```{r, out.width='80%', fig.show='hold', echo=FALSE, fig.align="center"}
knitr::include_graphics('../imagenes/practica_unidad_5/erathostenes3.jpg')
```

Los números encerrados son los primos, los tachados son compuestos. Este algoritmo para generar una lista de números primos se conoce como [la Criba de Eratóstenes](https://es.wikipedia.org/wiki/Criba_de_Erat%C3%B3stenes). 

Definir una función llamada `mostrar_primos(n, enfoque)` que se base en la criba de Eratóstenes y muestre todos los números primos hasta un número entero `n`. La función debe implementar los siguientes enfoques:

- `"asumir_primos"`: partir de un vector lógico donde todos los números, salvo el 1, se consideran primos inicialmente. Luego, descartar los múltiplos de cada número que aún es considerado primo.

- `"tachar"`: utilizar un vector llamado `tachado` que comience con todos los valores en `FALSE`, e ir marcando con `TRUE` a los números que se descartan por no ser primos (es decir, los tachados). Comenzar tachando el 1, y luego los múltiplos de cada número no tachado.

- `"encerrado"`: partir de un vector `encerrado` en el que todos los números comiencen como `TRUE`. Cada vez que se encuentre un número primo, marcar (poner en `FALSE`) todos sus múltiplos, indicando que ya no están "encerrados".

Ejemplos de uso:

```{r}
#| echo: false
mostrar_primos <- function(n, enfoque = c("asumir_primos", "tachar", "encerrado")) {
  if (enfoque == "asumir_primos") {
    es_primo <- rep(TRUE, n)
    es_primo[1] <- FALSE
    for (i in 2:n) {
      if (es_primo[i]) {
        print(i)
        j <- 2 * i
        while (j <= n) {
          es_primo[j] <- FALSE
          j <- j + i
        }
      }
    }
  } else if (enfoque == "tachar") {
    tachado <- logical(n)
    tachado[1] <- TRUE
    for (i in 2:n) {
      if (!tachado[i]) {
        print(i)
        j <- 2 * i
        while (j <= n) {
          tachado[j] <- TRUE
          j <- j + i
        }
      }
    }
  } else if (enfoque == "encerrado") {
    encerrado <- rep(TRUE, n)
    for (i in 2:n) {
      if (encerrado[i]) {
        print(i)
        for (j in seq(i, n, i)) {
          encerrado[j] <- FALSE
        }
      }
    }
  }
}
```


```{r}
mostrar_primos(15, enfoque = "asumir_primos")
mostrar_primos(15, enfoque = "tachar")
mostrar_primos(15, enfoque = "encerrado")
```

## Matrices

### Ejercicio 7

**Suma de dos matrices**

Dadas dos matrices de igual dimensión $\mathbf{A}$ y $\mathbf{B}$:

$$
\mathbf{A} = \begin{pmatrix} 5 & 2 \\ 8 & 3 \\ 2 & 1\end{pmatrix} \qquad \qquad
\mathbf{B} = \begin{pmatrix} 0 & 1 \\ -1 & 2 \\ 3 & 4\end{pmatrix}
$$

la suma entre ellas es igual a:

$$
\mathbf{A} + \mathbf{B} = \begin{pmatrix} 5 & 2 \\ 8 & 3 \\ 2 & 1\end{pmatrix} +
\begin{pmatrix} 0 & 1 \\ -1 & 2 \\ 3 & 4\end{pmatrix} =
\begin{pmatrix} 5 & 3 \\ 7 & 5 \\ 5 & 5\end{pmatrix}
$$

Definir una función llamada `sumar_matrices(A, B)` que tome dos matrices `A` y `B` de la misma dimensión y devuelva su suma. La función debe devolver un error informativo si las dimensiones de las matrices no coinciden. Ejemplo de su uso:

```{r}
#| echo: false
sumar_matrices <- function(A, B) {
  if (nrow(A) != nrow(B) || ncol(A) != ncol(B)) {
    stop("Las dimensiones de las matrices no coinciden.")
  }
  suma <- matrix(NA, nrow(A), ncol(A))
  for (i in 1:nrow(A)) {
    for (j in 1:ncol(A)) {
      suma[i, j] <- A[i, j] + B[i, j]
    }
  }
  return(suma)
}
```


```{r}
#| error: true
A <- matrix(c(5, 8, 2, 2, 3, 1), nrow = 3)
B <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 3)
sumar_matrices(A, B)

B <- matrix(c(0, -1, 3, 1, 2, 4), nrow = 2)
sumar_matrices(A, B)
```

### Ejercicio 8

**Hallar mínimo en una matriz**

a.  Definir una función llamada `minimo_matriz(m)` que encuentre el menor valor en una matriz numérica `m` y lo devuelva como el primer elemento de un vector de largo 3, el cual debe tener como segundo y tercer elemento el número de fila y de columna donde se encuentra el mínimo, respectivamente. El vector devuelto debe hacer uso del atributo *names*. Ejemplo de uso:
    
    ```{r}
    #| echo: false
    minimo_matriz <- function(m) {
      min <- m[1, 1]
      fila <- 1
      col <- 1
      for (i in 1:nrow(m)) {
        for (j in 1:ncol(m)) {
          if (m[i, j] < min) {
            min <- m[i, j]
            fila <- i
            col <- j
          }
        }
      }
      resultado <- c(minimo = min, fila = fila, columna = col)
      return(resultado)
    }
    ```
    
    ```{r}
    A <- matrix(c(5, 8, 2, 7, 3, 1), nrow = 3)
    A
    minimo_matriz(A)
    ```

b.  Definir una función llamada `minimo_matriz_fila(m, fila)` que encuentre el menor valor en la fila número `fila` de una matriz numérica `m` y devuelva un vector de largo 2, donde el primer elemento sea el valor mínimo encontrado y el segundo elemento sea el número de columna en la que lo encontró. Por defecto, la búsqueda del mínimo debe hacerse en la fila 1. El vector devuelto debe hacer uso del atributo *names*. Ejemplo de uso:
    
    ```{r}
    #| echo: false
    minimo_matriz_fila <- function(m, fila = 1) {
      min <- m[fila, 1]
      col <- 1
      for (j in 1:ncol(m)) {
        if (m[fila, j] < min) {
          min <- m[fila, j]
          col <- j
        }
      }
      return(c(minimo = min, columna = col))
    }
    ```
    
    ```{r}
    A <- matrix(c(5, 8, 2, 7, 3, 1), nrow = 3)
    A
    minimo_matriz_fila(A, 2)
    minimo_matriz_fila(A)
    ```

### Ejercicio 9

**Reordenar matriz según valores en una fila o columna**

a.  Definir una función llamada `ordenar_desc_col(m, col)` que intercambie las filas de la matriz `m` de modo que la misma quede con los valores de la columna número `col` ordenados de forma descendente. Ejemplos de su uso:
    
    ```{r}
    #| echo: false
    ordenar_desc_col <- function(m, col) {
      if (nrow(m) > 1) {
        for (i in 1:(nrow(m)-1)) {
          for (j in (i+1):nrow(m)) {
            if (m[i, col] < m[j, col]) {
              for (k in 1:ncol(m)) {
                tmp <- m[i, k]
                m[i, k] <- m[j, k]
                m[j, k] <- tmp
              }
            }
          }
        }
      }
      return(m)
    }
    ```
    
    ```{r}
    A <- matrix(c( 4, 13,  9, 17,
                  20, 14, 14,  9,
                   2, 16, 12,  7,
                  16,  2,  4, 11,
                  12, 20, 16,  4), nrow = 5, byrow = TRUE)
    A
    ordenar_desc_col(A, 3)
    
    A <- matrix(c( 4, 13,  9, 17), nrow = 1)
    A
    ordenar_desc_col(A, 3)
    ```

b.  Definir la función `ordenar_asc_fila(m, fila)` para intercambiar las columnas de la matriz `m` de modo que la misma quede con los valores de la fila número `fila` ordenados en forma ascendente. Ejemplos de su uso:
    
    ```{r}
    #| echo: false
    ordenar_asc_fila <- function(m, fila) {
      if (ncol(m) > 1) {
        for (i in 1:(ncol(m) - 1)) {
          for (j in (i + 1):ncol(m)) {
            if (m[fila, i] > m[fila, j]) { # Solo cambia el signo
              for (k in 1:nrow(m)) {
                tmp      <- m[k, i]
                m[k, i]  <- m[k, j]
                m[k, j]  <- tmp
              }
            }
          }
        }
      }
      return(m)
    }
    ```
    
    ```{r}
    A <- matrix(c( 4, 13,  9, 17,
                  20, 14, 14,  9,
                   2, 16, 12,  7,
                  16,  2,  4, 11,
                  12, 20, 16,  4), nrow = 5, byrow = TRUE)
    A
    ordenar_asc_fila(A, 3)
    
    A <- matrix(c( 4, 13,  9, 17), nrow = 1)
    A
    ordenar_asc_fila(A, 1)
    ```

### Ejercicio 10

**Cuadrado mágico**

Un [cuadrado mágico](https://es.wikipedia.org/wiki/Cuadrado_m%C3%A1gico) es un arreglo bidimensional de enteros en el que las filas, columnas y diagonales suman el mismo valor. Uno de los cuadrados mágicos más famosos aparece en el grabado *Melancolía I* de Alberto Durero, justo debajo de la campana. En el mismo, todas las sumas dan 34, y además Durero acomodó el cuadrado de manera que en el centro en la fila de abajo se forme *1514*, año en el que produjo el grabado. 

```{r, out.width='48%', fig.show='hold', echo=FALSE, fig.align="center"}
knitr::include_graphics('../imagenes/practica_unidad_5/durero.jpg')
```

Definir una función llamada `cuadrado_magico(cuadrado)` que devuelva `TRUE` si una matriz $n \times n$ contiene un cuadrado mágico, o `FALSE` en caso contrario. Ejemplos de su uso:

```{r}
#| echo: false
cuadrado_magico <- function(cuadrado) {
  n <- nrow(cuadrado)
  
  # Calcular el primer total fila para tener de control
  control <- 0
  for (j in 1:n) {
    control <- control + cuadrado[1, j]
  }
  
  # Calcular los restantes totales filas y chequearlos
  for (i in 2:n) {
    total <- 0
    for (j in 1:n) {
      total <- total + cuadrado[i, j]
    }
    if (total != control) {
      return(FALSE)
    }
  }
  
  # Chequear totales columnas si lo anterior estuvo bien
  for (j in 1:n) {
    total <- 0
    for (i in 1:n) {
      total <- total + cuadrado[i, j]
    }
    if (total != control) {
      return(FALSE)
    }
  }
  
  # Chequear diagonales si lo anterior estuvo bien
  diag1 <- 0
  diag2 <- 0
  for (i in 1:n) {
    diag1 <- diag1 + cuadrado[i, i]
    diag2 <- diag2 + cuadrado[n - i + 1, i]
  }
  if (diag1 != control || diag2 != control) return(FALSE)
  return(TRUE)
}

```

```{r}
cuadrado <- matrix(c(16,  3,  2, 13,
                      5, 10, 11,  8,
                      9,  6,  7, 12,
                      4, 15, 14,  1), nrow = 4, byrow = TRUE)
cuadrado
cuadrado_magico(cuadrado)

cuadrado <- matrix(c( 0,  3,  2, 13,
                      5, 10, 11,  8,
                      9,  6,  7, 12,
                      4, 15, 14,  1), nrow = 4, byrow = TRUE)
cuadrado
cuadrado_magico(cuadrado)
```

## Operaciones Vectorizadas

### Ejercicio 11

**Resolución alternativa de ejercicios anteriores**

a.  ¿Cuál es la función de R base que se encarga de sumar los elementos de un arreglo numérico? Utilizarla en el mismo ejemplo presentado en el [Ejercicio 1](#ejercicio-1) y comparar resultados.

b.  En el [Ejercicio 2](#ejercicio-2) escribimos una función llamada `sumar_vectores(u, v)` que toma dos vectores `u` y `v` de la misma dimensión y devuelve su suma. De manera similar, en el [Ejercicio 7](#ejercicio-7) escribimos una función para sumar dos matrices. ¿Cómo podemos obtener el mismo resultado sin tener que crear estas funciones nuevas, sabiendo que en R las funciones operan de forma vectorizada?

c.  ¿Con qué función de R base se pueden ordenar de forma ascendente los elementos de un vector numérico? Demostrarlo con los mismos ejemplos del [Ejercicio 3](#ejercicio-3). ¿Se puede aplicar esta función en vectores de tipo carácter?

d.  ¿Con qué funciones de R base se pueden encontrar los valores mínimos y máximos de un vector o de una matriz? Las funciones que escribimos en el [Ejercicio 4](#ejercicio-4) y en el [Ejercicio 8](#ejercicio-8) persiguen este mismo objetivo, pero además devuelven la posición del valor buscado en el arreglo. ¿Cómo se puede hacer esto en R base? ¿Se pueden aplicar estas funciones en vectores de tipo carácter?

e.  Utilizando las funciones vectorizadas de R, ¿cómo podemos obtener de manera sencilla el producto escalar entre dos vectores, como en el [Ejercicio 5](#ejercicio-5)a?

f.  ¿Cómo se pueden usar las funciones de R base para encontrar el valor mínimo en una fila en particular de una matriz numérica? Demostrarlo con la matriz que se define a continuación, suponiendo que deseamos encontrar cuál es el mínimo en la fila 2.

    ```{r}
    A <- matrix(c(5, 8, 2, 7, 3, 1), nrow = 3)
    ```

g.  Pensar una nueva forma de crear la función `cuadrado_magico()` del [Ejercicio 10](#ejercicio-10) que aproveche la operatoria vectorizada de R para simplificar los cálculos.

### Ejercicio 12

**Comparación entre `for` y `apply`**

Dada la matriz `m`:

```{r}
# set.seed asegura que todos obtengamos la misma matriz, a pesar de que se genera aleatoriamente
set.seed(34)
m <- matrix(sample(100, 20), nrow = 4)
m
```

calcular la media de cada columna de dos maneras diferentes:

a.  Usando una estructura iterativa `for()`.
b.  Usando la función `apply()`.

En ambos casos se puede usar la función de R Base `mean()` o definir una nueva función propia para calcular un promedio.
