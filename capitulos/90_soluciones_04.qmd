---
number-sections: false
---

```{=latex}
\thispagestyle{primerapagina}
```

# Soluciones de la Práctica de la Unidad 4

## Ejercicio 1

Primero dirigirse a la carpeta `unidad_4\ejercicio_1`, puede hacerlo utilizando el comando cd:

```cmd
cd ~tu_ruta\unidad_4\ejercicio_1
```

Crear la carpeta principal `organizacion_usuarios`:

```cmd
mkdir organizacion_usuarios
cd organizacion_usuarios
```

Crear subcarpetas

```cmd
mkdir registrados temporales_abril
```

Para crear usuarios registrados primero moverse a la carpeta `registrados` usando `cd`:

```cmd
cd registrados
```
y luego crear los archivos: 

```cmd
echo IP: 192.168.1.1 > ABC1234A_R.txt
echo Usuario: juanperez >> ABC1234A_R.txt
echo Email: juanperez@email.com >> ABC1234A_R.txt

echo IP: 192.168.1.2 > DEF5678B_R.txt
echo Usuario: marialopez >> DEF5678B_R.txt
echo Email: marialopez@email.com >> DEF5678B_R.txt

echo IP: 192.168.1.3 > GHI9012C_R.txt
echo Usuario: carlosgomez >> GHI9012C_R.txt
echo Email: carlosgomez@email.com >> GHI9012C_R.txt
```

Para crear usuarios temporales primero usar `cd ..` para volver a la carpeta `organizacion_usuarios` y luego `cd temporales_abril` para ingresar a la carpeta `temporales`, alli crear los archivos correspondientes:

```cmd
echo IP: 192.168.2.1 > JKL3456D_T.txt
echo Nombre: invitado01 >> JKL3456D_T.txt

echo IP: 192.168.2.2 > MNO7890E_T.txt
echo Nombre: invitado02 >> MNO7890E_T.txt

echo IP: 192.168.2.3 > PQR1234F_T.txt
echo Nombre: invitado03 >> PQR1234F_T.txt
```

Supongamos que el usuario temporal `MN34OP56_T.txt` se ha registrado, debemos copiar el archivo del usuario a la carpeta `registrados`, para eso primero volvemos a la carpeta principal `organizacion_usuarios` con `cd ..` y luego copiamos el archivo del usuario desde la carpeta `temporal` hacia la carpeta `registrados`:

```cmd
copy temporales_abrilMN34OP56_T.txt registrados
```

Editar el archivo para agregar datos (nombre de usuario e email):

```cmd
echo Usuario: federicoruiz >> registrados/MN34OP56_T.txt
echo Email: federico@email.com >> registrados/MN34OP56_T.txt
```

Renombrar el archivo con sufijo _R:

```cmd
rename registrados\MN34OP56_T.txt MN34OP56_R.txt
```

Mostrar contenido actualizado:

```cmd
type registrados\MN34OP56_R.txt
```

Eliminar el archivo original de la carpeta`temporales_abril`:

```cmd
del temporales_abril\MN34OP56_T.txt
```

Copiar contenido de archivos temporales al historial, para ello se debe crear el archivo `historial.txt`: 

```cmd
copy temporales\temporales_abril.txt historial.txt
```
Eliminar la carpeta `temporales_abril` y crear `temporales_mayo`:

```cmd
rmdir /s /q temporales\temporales_abril
mkdir temporales\temporales_mayo
```
Nota:

En el comando `rmdir`:

  - `/s` elimina la carpeta y todos sus contenidos (subcarpetas y archivos).
  
  - `/q` omite la confirmación de eliminación, lo que hace que el comando se ejecute      sin pedir confirmación.

## Ejercicio 2

Aunque no hay una única opción para resolver este problema, una posible solución sería: 

```{r, eval=FALSE}

menu<- function() {
  
  opcion <- 0
  
  while (opcion != 3) {
    cat("\n=== MENÚ PRINCIPAL ===\n")
    cat("1. Saludar\n")
    cat("2. Mostrar hora actual\n")
    cat("3. Salir\n")
    cat("Elegí una opción: ")

    opcion <- scan(what = integer(), nmax = 1, quiet = TRUE)

    if (opcion == 1) {
      cat("\nIngresá tu nombre: ")
      nombre <- scan(what = character(), nmax = 1, quiet = TRUE)
      cat("¡Hola,", nombre, "!\n")

    } else if (opcion == 2) {
      hora <- format(Sys.time(), "%H:%M:%S")
      cat("\nLa hora actual es:", hora, "\n")

    } else if (opcion == 3) {
      cat("\nIngresá tu nombre para despedirte: ")
      nombre <- scan(what = character(), nmax = 1, quiet = TRUE)
      cat("¡Chau,", nombre, "!\n")

    } else {
      cat("\nOpción inválida. Probá de nuevo.\n")
    }

    if (opcion != 3) {
      cat("\nPresioná Enter para volver al menú...")
      invisible(scan(what = character(), nmax = 1, quiet = TRUE))
    }
  }
}

# Ejecutamos la función:
menu()

```

Nota: la función `invisible(...)` en R ejecuta algo sin mostrar su resultado en la consola. Es útil cuando solo querés que se realice una acción (como leer un dato con scan()) pero no te interesa ver lo que devuelve.Se usa mucho para que el programa se pause esperando que el usuario presione enter (como para "volver al menú") sin ensuciar la consola.


## Ejercicio 3

```{r eval=FALSE}

evaluar_pelicula <- function() { 
  
cat("Ingrese la cantidad de jueces en el grupo:\n")
n <- scan(what = integer(), nmax = 1, quiet = TRUE)

if (n < 3 || n > 6) {
  cat("Cantidad inválida de jueces. Debe ser entre 3 y 6.\n")
} else {
  cat("Ingrese el nombre de la película:\n")
  nombre <- readLines(con = stdin(), n = 1)

  suma <- 0

  for (i in 1:n) {
    cat("Ingrese la calificación del juez", i, "\n")
    nota <- scan(what = numeric(), nmax = 1, quiet = TRUE)

    while (nota < 0 || nota > 10) {
      cat("Calificación inválida. Las calificaciones deben ser entre 1 y 10.\n")
      nota <- scan(what = numeric(), nmax = 1, quiet = TRUE)
    }

    suma <- suma + nota
  }

  promedio <- suma / n
  cat("La clasificación promedio para la película", nombre, "es", round(promedio, 2), "puntos.\n")
  }
}

# Ejecutamos la función:
evaluar_pelicula()

```

Nota: `scan()` sirve para leer entradas “palabra por palabra” (por defecto separa por espacios), por eso para leer el nombre de la pelicula es mas eficiente usar `readline()` que captura toda la línea de texto, incluyendo los espacios.

# Ejercicio 4

**Version 1: intentos ilimitados**

```{r, eval=FALSE}
verificar_contrasenia_ilimitada <- function ()  {

contrasenia_correcta <- "amoprogramar"
ingresada <- ""

while (ingresada != contrasenia_correcta) {
  cat("Ingrese la contraseña:\n")
  ingresada <- scan(what = character(), nmax = 1, quiet = TRUE)
  if (ingresada != contrasenia_correcta) {
    cat("Contraseña incorrecta. Ingrésela nuevamente.\n")
  }
}

cat("¡Contraseña correcta! Puede continuar con sus estudios.\n")
}

# Ejecutamos la función:
verificar_contrasenia_ilimitada()

```

**Version 2: intentos limitados (5 intentos)**

```{r, eval=FALSE}

verificar_contrasenia_limitada <- function () {

contrasenia_correcta <- "amoprogramar"
ingresada <- ""
intentos_restantes <- 5

while (intentos_restantes > 0 && ingresada != contrasenia_correcta) {
  cat("Ingrese la contraseña:\n")
  ingresada <- scan(what = character(), nmax = 1, quiet = TRUE)
  
  if (ingresada != contrasenia_correcta) {
    intentos_restantes <- intentos_restantes - 1
    if (intentos_restantes > 0) {
      cat("Contraseña incorrecta. Intentos restantes:", intentos_restantes, "\n")
    } else {
      cat("Demasiados intentos fallidos. Su cuenta ha sido bloqueada.\n")
    }
  }
}

if (ingresada == contrasenia_correcta) {
  cat("¡Contraseña correcta! Puede continuar con sus estudios.\n")
}
}

# Ejecutamos la función:

verificar_contrasenia_limitada()
```

