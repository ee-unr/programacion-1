---
number-sections: false
---

```{=latex}
\thispagestyle{primerapagina}
```

# Soluciones de la Práctica de la Unidad 02

## Solución Ejercicio 1

```{r}
# PROGRAMA: "Paridad de un número" -----------------
x <- 3
if (x %% 2 == 0) {
	cat(x, "es par")
} else {
	cat(x, "es impar")
}
```

En el código anterior, realizamos una asignación explícita de un valor en la variable (`x <- 3`). Esto nos permite hacer un uso más interactivo del código, que puede ser útil para probar si anda o cuando vamos corriendo por partes para detectar posibles errores. 

Otra opción se muestra en el siguiente ejemplo. En lugar de asignarle un valor a `x` como parte del script, indicamos que cuando el código sea ejecutado, el usuario deberá ingresar un valor con el teclado. Para esto empleamos la función `scan()`. Su argumento `n = 1` significa que el usuario sólo deberá ingresar un número, el cual será asignado a la variable `x`. Teniendo un archivo de código con el programa como se muestra a continuación, podemos ejecutarlo de forma completa mediante el botón `Source` de RStudio. Al llegar a la evaluación de `scan()`, deberemos ingresar el valor que deseemos en la consola y dar Enter para que la ejecución continúe.

```{r, eval = FALSE}
# PROGRAMA: "Paridad de un número" ----------------------------
cat("Ingrese un número entero: ")
x <- scan(n = 1)
if (x %% 2 == 0) {
	cat(x, "es par")
} else {
	cat(x, "es impar")
}
```


## Solución Ejercicio 2


```{r}
# PROGRAMA: "Mayor de tres números" ----------------------------
x <- 5
y <- 5
z <- 7
if (x >= y && x >= z) {
	cat("El mayor es", x)
} else if (y >= z) {
	cat("El mayor es", y)
} else {
	cat("El mayor es", z)
}
```

Observación: se llega a la segunda evaluación lógica cuando ya sea `y` o `z` (o ambos) es mayor a `x`, por lo tanto sólo es necesario saber cuál de ellos es el mayor.


## Solución Ejercicio 3


```{r}
# PROGRAMA: "Determinar salario" ----------------------------
horas <- 8
dia <- "martes"
turno <- "T"
salario <- horas * 400
if (turno == "N") {
	salario <- salario + horas * 200
}
if (turno == "DOM") {
	salario <- salario + horas * 100
}
cat("El salario que se debe abonar es", salario)
```


## Solución Ejercicio 4


```{r}
# PROGRAMA: "Convertir temperatura" ----------------------------
temp <- 20
modo <- "C a F"
if (modo == "C a F") {
	temp_nuevo <- temp * 9 / 5 + 32
	cat(temp, "ºC equivale a", temp_nuevo, "ºF")
} else {
	temp_nuevo <- (temp - 32) * 5 / 9
	cat(temp, "ºF equivale a", temp_nuevo, "ºC")
}
```


## Solución Ejercicio 5

**a.** 

```{r}
# PROGRAMA: "Suma de los n primeros números naturales" ---------------------
n <- 10
suma <- 0
for (i in 1:n) {
	suma <- suma + i
}
cat("La suma de los primeros", n, "números naturales es", suma)
```

**b.** 

```{r}
# PROGRAMA: "Suma de los cuadrados de los n primeros números naturales" -----
n <- 10
suma <- 0
for (i in 1:n) {
	suma <- suma + i^2
}
cat("La suma de los primeros", n, "números naturales al cuadrado es", suma)
```

**c.** 

Sabemos el número de iteraciones, `n`, por eso usamos `for`. Por ejemplo, para `n = 4`, los primeros impares son:
  
```
1 = 2 * 1 - 1
3 = 2 * 2 - 1
5 = 2 * 3 - 1
7 = 2 * 4 - 1
```

De forma general, los primeros 4 impares son `2 * i - 1`, con `i = 1, 2, 3, 4`.
  
```{r}
# PROGRAMA: "Producto de los n primeros números naturales impares" ----------
n <- 10
producto <- 1
for (i in 1:n) {
	producto <- producto * (2 * i - 1)
}
cat("El producto de los primeros", n, "números naturales impares es", producto)
```

Otra forma:

```{r}
  # PROGRAMA: "Producto de los n primeros números naturales impares" ----------
n <- 10
producto <- 1
for (i in seq(1, 2 * n - 1, 2)) {
	producto <- producto * i
}
cat("El producto de los primeros", n, "números naturales impares es", producto)
```

**d.** 

```{r}
# PROGRAMA: "Suma de los cubos de los n primeros números naturales pares"
n <- 5
suma <- 0
for (i in 1:n) {
	suma <- suma + (2 * i)^3
}
cat("La suma de los cubos de los primeros", n, "números naturales pares es", suma)
```


## Solución Ejercicio 6

Utilizando estructura de control "PARA" 

```{r}
# PROGRAMA: "Calcular el factorial de n" ----------------------------
n <- 0
factorial <- 1
for (i in 1:n) {
	factorial <- factorial * i
}
cat("El factorial de", n, "es", factorial)
```

Utilizando estructura de control "MIENTRAS QUE" 

```{r}
# PROGRAMA: "Calcular el factorial de n" ----------------------------
n <- 0
factorial <- 1
i <- 0
while(i < n) {
	i <- i + 1
  factorial <- factorial * i
}
cat("El factorial de", n, "es", factorial)
```

**IMPORTANTE**. Notar que la primera opción no arroja de forma correcta el factorial de 0, que por definición es igual a 1. Se podría agregar alguna estructura condicional para esta situación. La segunda opción, en cambio, funciona también para `n <- 0`.

## Solución Ejercicio 7

```{r}
# PROGRAMA: "Secuencia de Fibonacci" ----------------------------
termino1 <- 0
termino2 <- 1
while (termino1 < 10000) {
	print(termino1)
	termino3 <- termino1 + termino2
  termino1 <- termino2
  termino2 <- termino3
}
```


<!-- ## Solución Ejercicio 8 -->

<!-- **Intentos ilimitados** -->

<!-- Para la codificación en R de este problema, usamos nuevamente la sentencia `scan()` mencionada en el Problema 1. En esta oportunidad, debemos incorpar el argumento `what = ` seguido por comillas vacías para indicar que el valor que será leído es de tipo caracter (la contraseña). También usamos el argumento `quiet = TRUE` para que no se imprima el mensaje que sale por defecto al hacer la lectura del número (`Read 1 item`). Para apreciar el funcionamiento, estas líneas de código deben estar guardadas en un script que sólo contenga a a este programa y debe ser ejecutado haciendo clic en el botón `Source` de RStudio. -->

<!-- ```{r, eval=FALSE} -->
<!-- # PROGRAMA: "Verificación de contraseña. Intentos ilimitados" -------------- -->
<!-- cat("Ingrese la contraseña") -->
<!-- contraseña <- scan(n = 1, what = "", quiet = TRUE) -->
<!-- while (contraseña != "amoestadistica") { -->
<!-- 	cat("Contraseña incorrecta. Ingrésela nuevamente") -->
<!-- 	contraseña <- scan(n = 1, what = "", quiet = TRUE) -->
<!-- } -->
<!-- cat("¡Contraseña correcta! Puede continuar con sus estudios.") -->
<!-- ``` -->

<!-- **Cinco intentos** -->

<!-- ```{r, eval=FALSE} -->
<!-- # PROGRAMA: "Verificación de contraseña. Cinco intentos" -------------- -->
<!-- cat("Ingrese la contraseña") -->
<!-- contraseña <- scan(n = 1, what = "", quiet = TRUE) -->
<!-- intentos <- 1 -->
<!-- while (contraseña != "amoestadistica" && intentos < 5) { -->
<!--   cat("Contraseña incorrecta. Ingrésela nuevamente") -->
<!--   contraseña <- scan(n = 1, what = "", quiet = TRUE) -->
<!--   intentos <- intentos + 1 -->
<!-- } -->
<!-- if (contraseña == "amoestadistica") { -->
<!--   cat("¡Contraseña correcta! Puede continuar con sus estudios.")   -->
<!-- } else { -->
<!--   cat("Ha utilizado los 5 intentos permitidos. Usuario bloqueado.") -->
<!-- } -->
<!-- ``` -->

<!-- Podemos aprovechar este problema para probar el uso de la línea de comando de Windows. Recomendamos que sigan los pasos vistos en clase y detallados en la guía de estudio para correr este programa desde una terminal. Además, pueden proponer cualquier agregado que se les ocurra. Por ejemplo, el siguiente programa pone un cartel al principio y va anunciando la cantidad de intentos remanentes. Si se guarda este código en una archivo llamado `contraseña.R`, debe ser ejecutado en la terminal con `Rscript contraseña.R`. -->


<!-- ```{r, eval=FALSE} -->
<!-- cat( -->
<!-- "========================================================================== -->
<!--                   BIENVENIDO AL SISTEMA DE GESTIÓN -->
<!-- ========================================================================== -->

<!-- Ingrese la contraseña: " -->
<!-- ) -->

<!-- contraseña <- scan(n = 1, what = "", quiet = TRUE) -->
<!-- intentos <- 1 -->
<!-- while (contraseña != "amoestadistica" && intentos < 5) { -->
<!--   cat("\nContraseña incorrecta. Le quedan", 5-intentos, "intentos. Ingrésela nuevamente: ") -->
<!--   contraseña <- scan(n = 1, what = "", quiet = TRUE) -->
<!--   intentos <- intentos + 1 -->
<!-- } -->
<!-- if (contraseña == "amoestadistica") { -->
<!--   cat("\n¡Contraseña correcta! Puede continuar con sus estudios.\n\n")   -->
<!-- } else { -->
<!--   cat("\nHa utilizado los 5 intentos permitidos. Usuario bloqueado.\n\n") -->
<!-- } -->
<!-- ``` -->

<!-- ![](../imagenes/practica_unidad_2/terminal.png){width="75%" fig-align="center"} -->


## Solución Ejercicio 8

Observar que:  

- el valor inicial es el 100 ya que la combinación no comienza por 0. 
- el `while` se detiene cuando la combinación es mayor a 800.
- se verifican las condiciones de multiplicidad, y si no se cumplen, se pasa directamente a la siguiente iteración. 
- en caso de que se cumplan las condiciones, se imprime la combinación, y se pasa a la siguiente iteración.

```{r}
# PROGRAMA: "Lista de posibles combinaciones" ----------------------------
combinacion <- 100

while (combinacion <= 800) {
    if (combinacion %% 11 != 0 || combinacion %% 8 == 0) {
        combinacion <- combinacion + 1
        next
    }
    
    print(combinacion)
    combinacion <- combinacion + 1
}

```

