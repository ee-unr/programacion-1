```{=latex}
\thispagestyle{primerapagina}
```

# Unidad 3. Descomposición algorítmica

::: {.presentacion-capitulo data-latex=""}
COMPLETAR

Principios de descomposición y refinamiento sucesivo. Creación de funciones en R. Paso de parámetros y ámbito de variables. Transparencia referencial y documentación de funciones.
:::


## Función `return()` o  Exiting a function ??

## Argumentos con valores asignados por defecto

## ¿Dónde guardamos el código que define nuestras funciones? SOURCE

----

## Pasaje de parámetros POR VALOR ??

## Ámbito de las variables

---
## Documentación de los subalgoritmos 

--- otras

## stop o exiting a function ??

## `NULL` vs `NA` vs `NaN`

## Modificar una variable global desde el cuerpo de una función en R (opcional)

otros temas nombrados en IDEAS



En R, las funciones pueden ser más complejas e incluir **valores por defecto**, **argumentos opcionales**, y estructuras de control como condicionales y bucles, lo que las convierte en herramientas poderosas para la programación eficiente.

## ¿Dónde guardamos el código que define nuestras funciones?


Esta distinción también es importante en R: la definición de las funciones debe ejecutarse antes de que las mismas sean llamadas desde el programa principal. Así, para traducir el pseudocódigo anterior a R, podríamos crear un archivo de código (llamado, por ejemplo, `ejemplo3.R`) con el siguiente contenido:

```{r}
# ---------------------------------------------------------------
# DEFINICIÓN DE FUNCIONES
# ---------------------------------------------------------------

f <- function(x, y) {
	resultado <- x^2 + 3 * y
	return(resultado)
}

maximo <- function(num1, num2) {
	if (num1 > num2) {
		return(num1)
	} else {
		return(num2)
	}
}

# ---------------------------------------------------------------
# PROGRAMA PRINCIPAL
# ---------------------------------------------------------------

rtdo1 <- f(2, 5)
rtdo2 <- f(3, 10)
rtdo3 <- maximo(rtdo1, rtdo2) + 20
cat("El resultado es", rtdo3)
```

VINCULAR SON SOURCE


