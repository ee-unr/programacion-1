
---
number-sections: false
---

```{=latex}
\thispagestyle{primerapagina}
```

# Pr√°ctica de la Unidad 4

## Ejercicio 1

Como administrador de usuarios de un sistema de ventas, usted debe organizar los datos de los usuarios registrados y temporales. Para hacerlo, realice las siguientes acciones desde la terminal:

Cree una carpeta principal llamada `organizacion_usuarios`.

Dentro de ella, cree dos subcarpetas: `registrados` y `temporales_abril`.

Agregue informaci√≥n ficticia de al menos tres usuarios registrados y tres usuarios temporales. Cada usuario debe tener un archivo propio, cuyo nombre debe ser un c√≥digo alfanum√©rico de 8 caracteres que finalice con `_T` para los usuarios temporales y `_R` para los usuarios registrados (por ejemplo: `ABC1234X_R.txt`). 

El contenido de los archivos debe ser:

- Usuarios registrados: direcci√≥n IP, nombre de usuario y correo electr√≥nico.

- Usuarios temporales: direcci√≥n IP y nombre de invitado (ej: "invitado01")

Aseg√∫rese de que cada archivo est√© guardado en la carpeta correspondiente.

Suponga que uno de los usuarios temporales se ha registrado oficialmente en el sistema: 
- Copie el archivo de ese usuario desde `temporales_abril` a la carpeta `registrados`.

- Edite el archivo del usuario para agregar el nombre de usuario y el correo electronico correspondiente.

- Renombre el archivo para que su nombre termine en `_R` en lugar de `_T`.

- Muestre el contenido del archivo actualizado por pantalla para asegurarse que la informaci√≥n fue correctamente registrada.

- Finalmente, elimine el archivo original de la carpeta `temporales_abril`.

Ademas, debe considerar que los archivos temporales se borran mensualmente, pero su informaci√≥n debe guardarse en un historial: 

- En el directorio principal (`organizacion_usuarios`), crea un archivo llamado `historial` y copia all√≠ el contenido de `temporales_abril`.

- Borra `temporales_abril` y crea `temporales_mayo`

## Ejercicio 2

Cree un script en R llamado `menu.R` que muestre un men√∫ de opciones en la consola, lea la opci√≥n elegida por el usuario y ejecute una acci√≥n diferente seg√∫n la opci√≥n seleccionada. 
El men√∫ debe contener al menos tres opciones (por ejemplo: "1. Saludar", "2. Mostrar fecha", "3. Salir").

El programa debe:

- Mostrar el men√∫ al usuario.

- Leer la opci√≥n ingresada.

- Responder con una acci√≥n distinta para cada opci√≥n:

  - Si elige "1", pedirle al usuario que ingrese su nombre y luego mostrar un saludo       personalizado, por ejemplo: "Hola, Pepito!".

  - Si elige "2", mostrar la hora actual (pod√©s usar el los comandos 
   `format(Sys.time(), "%H:%M:%S")` para obtenerla).
 
  - Si elige "3", pedirle al usuario que ingrese su nombre y luego mostrar un saludo       personalizado, por ejemplo: "Chau, Pepito!".

üëâ Tip: Si el usuario ingresa una opci√≥n no v√°lida, pod√©s mostrar un mensaje como "Opci√≥n inv√°lida".

## Ejercicio 3

Se desea desarrollar un programa que calcule la calificaci√≥n promedio otorgada a una pel√≠cula por un grupo de jueces de cine.
El grupo debe estar compuesto por un m√≠nimo de 3 y un m√°ximo de 6 jueces.
Si el n√∫mero ingresado no cumple con esta condici√≥n, el programa debe mostrar un mensaje adecuado y no continuar con el resto de las instrucciones.

Si el n√∫mero de jueces est√° dentro del intervalo aceptado, el programa debe:

- Solicitar al usuario que ingrese el nombre de la pel√≠cula.

- Solicitar las calificaciones otorgadas por cada uno de los jueces.

  Las calificaciones deben ser ingresadas una por una. Ademas el programa debe           asegurarse de que cada calificaci√≥n ingresada est√© dentro del rango v√°lido de 0 a      10. En caso contrario, debe mostrar un mensaje de error y solicitar nuevamente esa     calificaci√≥n.

  Ejemplo:
  
  ```r
  Ingrese la calificaci√≥n asignada por el juez 1:
  Ingrese la calificaci√≥n asignada por el juez 2:
  (y as√≠ hasta completar la cantidad de jueces indicada)
  ```
  
Una vez ingresadas todas las calificaciones, el programa debe:

- Calcular el promedio de los puntajes ingresados.

- Mostrar el nombre de la pel√≠cula y su puntaje promedio.

Por ejemplo, la salida podria ser un mensaje como el siguiente:

```r
"La clasificacion promedio para la pelicula Shrek 1 es 9 puntos"
```
## Ejercicio 4

En el campus virtual de una universidad, los usuarios pueden acceder a diferentes salas, cada una correspondiente a una materia espec√≠fica (por ejemplo, Programaci√≥n 1, Ciencia de Datos, Estad√≠stica). Cada sala est√° protegida por una contrase√±a √∫nica. Para acceder, el usuario debe ingresar la contrase√±a correcta. En caso de error, debe intentarlo nuevamente hasta lograrlo o hasta que se alcance un l√≠mite m√°ximo de intentos, tras lo cual la cuenta ser√° bloqueada.

Para el caso de la sala de Programaci√≥n 1, la contrase√±a es "amoprogramar". Vamos a suponer que un usuario quiere ingresar a esta sala. Escriba un algoritmo que:

- Muestre un mensaje solicitando el ingreso de la contrase√±a.

- Lea el valor ingresado por el usuario.

- Inicie un proceso de verificaci√≥n:
  
  Si la contrase√±a ingresada es incorrecta, debe mostrar:
  
  ```r
    "Contrase√±a incorrecta. Ingr√©sela nuevamente."
  ```
  y permitir un nuevo intento.
  
  Si la contrase√±a es correcta, debe mostrar:
  ```r
  "¬°Contrase√±a correcta! Puede continuar con sus estudios."
  ```

A partir de este escenario, se deben proponer **dos versiones** del algoritmo, considerando los siguientes casos:

**Caso 1:** El usuario puede intentar indefinidamente hasta ingresar la contrase√±a correcta.

**Caso 2:** El usuario tiene un m√°ximo de cinco intentos. Si no ingresa la contrase√±a correcta en ese n√∫mero de intentos, se debe mostrar el mensaje:

```r
"Demasiados intentos fallidos. Su cuenta ha sido bloqueada."
```

## Ejercicio 5

Vuelva al ejercicio 7 de la practica 3, en el que tuvo que crear una funci√≥n llamada `resolvente(a, b, c)` que muestra las soluciones de la ecuaci√≥n de segundo grado $a x^2 + b x + c = 0$, empleando la f√≥rmula resolvente:

$$x_{1, 2} = \frac{-b \pm \sqrt{(b^2 - 4ac)}}{2a}$$
Modifique el codigo de manera que: 

- El programa pida al usuario que ingrese los coeficientes a, b y c uno por uno. 
- Si el coeficiente `a` es cero, mostrar un mensaje de error y finalizar el programa.
- Calcule el discriminante (D) con la f√≥rmula: `D = b^2 - 4ac`
- Clasifique las soluciones de acuerdo al resultado de `D`:

  Si `D > 0`: Mostrar las dos soluciones reales distintas.
  
  Si `D = 0`: Mostrar la √∫nica soluci√≥n real (doble).
  
  Si `D < 0`: Indicar que las soluciones son complejas (sin calcularlas).
  
- Muestre la ecuaci√≥n ingresada en formato legible (ej: `x¬≤ - 5x + 6 = 0`).

- Muestre el valor de D.

- De el resultado con mensajes descriptivos, por ejemplo:

```r
"Existen dos soluciones reales distintas: x‚ÇÅ = 2, x‚ÇÇ = 3"
```
- Mejore la experiencia del usuario incluyendo:
  - Mensaje de bienvenida y despedida
  - N√∫meros que se muestren redondeados para facilitar su lectura.

## Ejercicio 6 

**Este ejercicon es opcional.**

Reescriba el programa anterior de forma que, en lugar de solicitar al usuario que ingrese los valores de `a`, `b` y `c` uno por uno desde la terminal, estos se ingresen directamente como argumentos del sistema al momento de ejecutar el script.

Para ello, utilice `commandArgs(trailingOnly = TRUE)` para capturar los valores y adapte el c√≥digo en consecuencia.
Aseg√∫rese de incluir validaciones adecuadas para verificar que los argumentos sean num√©ricos y que `a` no sea igual a cero.

Ejemplo de ejecuci√≥n desde consola:

```{r, eval=FALSE}
Rscript resolucion.R 1 -1 -2
```
> Hay dos soluciones reales: -1 y 2

```{r, eval=FALSE}
Rscript resolucion.R 1 2 1
```
> Hay una soluci√≥n real doble: -1

```{r, eval=FALSE}
Rscript resolucion.R 1 1 1
```
> Las soluciones son complejas.

```{r, eval=FALSE}
Rscript resolucion.R 0 1 1
```
> Error: El coeficiente a no puede ser 0.
